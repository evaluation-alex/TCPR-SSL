diff -Naur netperf-2.4.5-old/src/netlib.c netperf-2.4.5/src/netlib.c
--- netperf-2.4.5-old/src/netlib.c	2009-05-27 18:27:34.000000000 -0400
+++ netperf-2.4.5/src/netlib.c	2011-10-03 11:34:13.850512098 -0400
@@ -236,6 +236,9 @@
 /* global variables to hold the value for processor affinity */
 int     local_proc_affinity = -1,remote_proc_affinity = -1;
 
+int	tcpr_enabled = 1;
+int	tcpr_checkpointing = 1;
+
 /* these are to allow netperf to be run easily through those evil,
    end-to-end breaking things known as firewalls */
 char local_data_port[10];
diff -Naur netperf-2.4.5-old/src/netlib.h netperf-2.4.5/src/netlib.h
--- netperf-2.4.5-old/src/netlib.h	2008-10-30 16:48:46.000000000 -0400
+++ netperf-2.4.5/src/netlib.h	2011-10-03 11:34:06.245544076 -0400
@@ -441,6 +441,9 @@
 
 extern  int   local_proc_affinity, remote_proc_affinity;
 
+extern int tcpr_enabled;
+extern int tcpr_checkpointing;
+
 /* these are to allow netperf to be run easily through those evil,
    end-to-end breaking things known as firewalls */
 extern char local_data_port[10];
diff -Naur netperf-2.4.5-old/src/nettest_bsd.c netperf-2.4.5/src/nettest_bsd.c
--- netperf-2.4.5-old/src/nettest_bsd.c	2009-06-03 20:31:15.000000000 -0400
+++ netperf-2.4.5/src/nettest_bsd.c	2011-10-03 12:57:34.365511283 -0400
@@ -147,7 +147,6 @@
 #include "hist.h"
 #endif /* WANT_HISTOGRAM */
 
-
 /* make first_burst_size unconditional so we can use it easily enough
    when calculating transaction latency for the TCP_RR test. raj
    2007-06-08 however, change its default value so one can tell in
@@ -163,6 +162,8 @@
 #include <sys/sendfile.h>
 #endif /* HAVE_SENDFILE && (__linux || __sun) */
 
+#include <tcpr/application.h>
+
 
 
 /* these variables are specific to the BSD sockets tests, but can
@@ -416,6 +417,7 @@
 \n\
 TCP/UDP BSD Sockets Test Options:\n\
     -b number         Send number requests at start of _RR tests\n\
+    -c                Disable TCPR checkpointed acknowledgments\n\
     -C                Set TCP_CORK when available\n\
     -D [L][,R]        Set TCP_NODELAY locally and/or remotely (TCP_*)\n\
     -h                Display this text\n\
@@ -430,6 +432,7 @@
     -r req,[rsp]      Set request/response sizes (TCP_RR, UDP_RR)\n\
     -s send[,recv]    Set local socket send/recv buffer sizes\n\
     -S send[,recv]    Set remote socket send/recv buffer sizes\n\
+    -T                Disable TCPR\n\
     -4                Use AF_INET (eg IPv4) on both ends of the data conn\n\
     -6                Use AF_INET6 (eg IPv6) on both ends of the data conn\n\
 \n\
@@ -1589,6 +1592,11 @@
   int len;
   unsigned int nummessages = 0;
   SOCKET send_socket;
+  struct tcpr_connection tcpr;
+  struct sockaddr_in addr;
+  struct sockaddr_in peeraddr;
+  socklen_t addrlen = sizeof(addr);
+  socklen_t peeraddrlen = sizeof(peeraddr);
   int bytes_remaining;
   int tcp_mss = -1;  /* possibly uninitialized on printf far below */
 
@@ -1819,6 +1827,17 @@
       exit(1);
     }
 
+    if (tcpr_enabled) {
+      getsockname(send_socket, (struct sockaddr *)&addr, &addrlen);
+      getpeername(send_socket, (struct sockaddr *)&peeraddr, &peeraddrlen);
+      if (tcpr_setup_connection(&tcpr, peeraddr.sin_addr.s_addr, peeraddr.sin_port, addr.sin_port, 0) < 0) {
+        perror("tcpr_setup_connection");
+	exit(1);
+      }
+      if (!tcpr_checkpointing)
+        tcpr_shutdown_input(&tcpr);
+    }
+
 #ifdef WIN32
   /* this is used so the timer thread can close the socket out from */
   /* under us, which to date is the easiest/cleanest/least */
@@ -1958,6 +1977,11 @@
       get_tcp_info(send_socket,&tcp_mss);
     }
     
+    if (tcpr_enabled) {
+      tcpr_close(&tcpr);
+      tcpr_teardown_connection(&tcpr);
+    }
+
     if (shutdown(send_socket,SHUT_WR) == SOCKET_ERROR) {
       perror("netperf: cannot shutdown tcp stream socket");
       exit(1);
@@ -2297,6 +2321,11 @@
   int len;
   unsigned int nummessages = 0;
   SOCKET recv_socket;
+  struct tcpr_connection tcpr;
+  struct sockaddr_in addr;
+  struct sockaddr_in peeraddr;
+  socklen_t addrlen = sizeof(addr);
+  socklen_t peeraddrlen = sizeof(peeraddr);
   int bytes_remaining;
   int tcp_mss = -1;  /* possibly uninitialized on printf far below */
 
@@ -2525,6 +2554,17 @@
       exit(1);
     }
 
+    if (tcpr_enabled) {
+      getsockname(recv_socket, (struct sockaddr *)&addr, &addrlen);
+      getpeername(recv_socket, (struct sockaddr *)&peeraddr, &peeraddrlen);
+      if (tcpr_setup_connection(&tcpr, peeraddr.sin_addr.s_addr, peeraddr.sin_port, addr.sin_port, 0) < 0) {
+        perror("tcpr_setup_connection");
+	exit(1);
+      }
+      if (!tcpr_checkpointing)
+        tcpr_shutdown_input(&tcpr);
+    }
+
 #ifdef WIN32
   /* this is used so the timer thread can close the socket out from */
   /* under us, which to date is the easiest/cleanest/least */
@@ -2611,6 +2651,8 @@
 				    recv_size,
 				    0)) > 0 ) {
 
+      if (tcpr_enabled && tcpr_checkpointing)
+        tcpr_checkpoint_input(&tcpr, len);
 #ifdef WANT_HISTOGRAM
       if (verbosity > 1) {
 	/* timestamp the exit from the recv call and update the histogram */
@@ -2678,6 +2720,11 @@
       get_tcp_info(recv_socket,&tcp_mss);
     }
     
+    if (tcpr_enabled) {
+      tcpr_close(&tcpr);
+      tcpr_teardown_connection(&tcpr);
+    }
+    
     if (shutdown(recv_socket,SHUT_WR) == SOCKET_ERROR) {
       perror("netperf: cannot shutdown tcp maerts socket");
       exit(1);
@@ -5535,6 +5582,11 @@
   char	*temp_message_ptr;
   int	nummessages;
   SOCKET	send_socket;
+  struct tcpr_connection tcpr;
+  struct sockaddr_in addr;
+  struct sockaddr_in peeraddr;
+  socklen_t addrlen = sizeof(addr);
+  socklen_t peeraddrlen = sizeof(peeraddr);
   int	trans_remaining;
   double	bytes_xferd;
 
@@ -5777,6 +5829,17 @@
       
       exit(1);
     }
+
+    if (tcpr_enabled) {
+      getsockname(send_socket, (struct sockaddr *)&addr, &addrlen);
+      getpeername(send_socket, (struct sockaddr *)&peeraddr, &peeraddrlen);
+      if (tcpr_setup_connection(&tcpr, peeraddr.sin_addr.s_addr, peeraddr.sin_port, addr.sin_port, 0) < 0) {
+        perror("tcpr_setup_connection");
+	exit(1);
+      }
+      if (!tcpr_checkpointing)
+        tcpr_shutdown_input(&tcpr);
+    }
     
 #ifdef WIN32
     /* this is used so the timer thread can close the socket out from */
@@ -5918,6 +5981,8 @@
 	  perror("send_tcp_rr: data recv error");
 	  exit(1);
 	}
+        if (tcpr_enabled && tcpr_checkpointing)
+	  tcpr_checkpoint_input(&tcpr, rsp_bytes_recvd);
 	rsp_bytes_left -= rsp_bytes_recvd;
 	temp_message_ptr  += rsp_bytes_recvd;
       }	
@@ -6075,6 +6140,11 @@
     
     confidence_iteration++;
 
+    if (tcpr_enabled) {
+      tcpr_close(&tcpr);
+      tcpr_teardown_connection(&tcpr);
+    }
+
     /* we are now done with the socket, so close it */
     close(send_socket);
 
@@ -12738,7 +12808,7 @@
 
 {
 
-#define SOCKETS_ARGS "b:CDnNhH:L:m:M:p:P:r:s:S:T:Vw:W:z46"
+#define SOCKETS_ARGS "b:cCDnNhH:L:m:M:p:P:r:s:S:tTVw:W:z46"
 
   extern char	*optarg;	  /* pointer to option string	*/
   
@@ -12795,6 +12865,9 @@
       printf("Initial request burst functionality not compiled-in!\n");
 #endif /* WANT_FIRST_BURST */
       break;
+    case 'c':
+      tcpr_checkpointing = 0;
+      break;
     case 'C':
 #ifdef TCP_CORK
       /* set TCP_CORK */
@@ -12894,6 +12967,9 @@
       /* set the test name */
       strcpy(test_name,optarg);
       break;
+    case 'T':
+      tcpr_enabled = 0;
+      break;
     case 'W':
       /* set the "width" of the user space data */
       /* buffer. This will be the number of */
